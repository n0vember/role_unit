### Default environment

#    (c) 2016-2022, n0vember <n0vember@half-9.net>
#
#    This file is part of role_unit.
#
#    role_unit is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    role_unit is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with role_unit.  If not, see <http://www.gnu.org/licenses/>.

### User environment

ru_env_name=${RU_ENV_NAME:-role_unit}
ru_env_image=${RU_ENV_IMAGE:-debian11}
ru_env_type=${RU_ENV_TYPE:-docker}
ru_backend=${RU_BACKEND:-docker}
ru_frontend=${RU_FRONTEND:-ansible}
ru_count=${RU_COUNT:-1}
ru_debug=${RU_DEBUG:-0}
ru_first_debug=0
ru_conf_file_name="ru.conf"
ru_tmp_dir=${TMPDIR:-/tmp}

[ -n "$RU_CONF" ] && ru_conf="$RU_CONF"
[ -n "$RU_DEBUG" -a -z "$RU_CONF" ] && ru_first_debug=1

### Global functions

ru_info() {
  local txtcyn='\e[0;36m' # cyan text
  local txtrst='\e[0m'    # text reset
  printf "${txtcyn}"
  echo -n "$@"
  printf "${txtrst}"
  echo
}

ru_warning() {
  local txtcyn='\e[0;35m' # purple text
  local txtrst='\e[0m'    # text reset
  printf "${txtcyn}"
  echo -n "$@"
  printf "${txtrst}"
  echo
}

ru_usage() {
  local txtred='\e[0;31m' # red test
  local txtrst='\e[0m'    # text reset
  printf "${txtred}" >&2
  echo -n "$@" >&2
  printf "${txtrst}" >&2
  echo >&2
  exit 1
}

ru_uuid() {
  if [ -f /proc/sys/kernel/random/uuid ] ; then
    cat /proc/sys/kernel/random/uuid
  elif which uuidgen >/dev/null 2>&1 ; then
    uuidgen
  elif which uuid >/dev/null 2>&1 ; then
    uuid
  else
    date +%s
  fi
}

### Servers management functions

ru_server() {
  local ru_num=$(ru_server_num_int $1)
  echo ru_${ru_env_name}_${ru_num}
}

ru_servers() {
  local ru_num
  for ru_num in $(ru_server_nums)
  do
    ru_server ${ru_num}
  done
}

ru_server_nums() {
  local ru_num
  for ru_num in $(seq 0 $((ru_count-1)))
  do
    echo ${ru_num}
  done
}

ru_server_num_int() {
  local ru_num="$1"
  echo "${ru_num}"
}

### test management functions

ru_run_with_timeout() {
  local flag flagged=1 timeout server ret_code=1
  while [ $flagged -gt 0 ]
  do
    flag="$1"
    case "${flag}" in
      -t) timeout=$2 ; shift 2 ;;
      -n) server="-n $2" ; shift 2 ;;
      *) flagged=0 ;;
    esac
  done
  while [ ${timeout} -gt 0 ] ; do
    ru_run ${server} "$@" >/dev/null 2>&1
    ret_code=$?
    test ${ret_code} -gt 0 || break
    timeout=$((timeout-1))
    test ${timeout} -gt 0 || break
    sleep 1
  done
  return ${ret_code}
}

ru_assert_with_timeout() {
  ru_info "ru_assert_with_timeout is deprecated, use ru_run_with_timeout instead"
  ru_run_with_timeout "$@"
}

### Set frontend environment

ru_set_conf_file() {
  if [ ${ru_debug} -eq 1 -a -n "${ru_conf}" ] ; then
    ru_conf_file=${ru_conf}
  else
    ru_conf_file=${ru_dir}/${ru_conf_file_name}
  fi
}

ru_dir_init() {
  if [ ${ru_debug} -eq 0 -o -z "${ru_conf}" ] ; then
    ru_id=$(ru_uuid)
    ru_dir=${ru_tmp_dir}/${ru_frontend}/${ru_id}
    mkdir -p ${ru_dir}
    ru_conf_file=${ru_dir}/${ru_conf_file_name}
    echo "ru_id=${ru_id}" >> ${ru_conf_file}
    echo "ru_dir=${ru_dir}" >> ${ru_conf_file}
  fi
  ru_set_conf_file
  . ${ru_conf_file}
}

ru_run_frontend() {
  if [ $# -gt 0 -a "$1" == "verbose" ] ; then
    ru_info applying automation
  fi
  assert "$(ru_run_frontend_command)"
}

ru_server_num() {
  local server_name="$1"
  local server_num=0
  while [ ${server_num} -lt ${ru_count} ] ; do
    if [ "$(ru_server_name ${server_num})" == "${server_name}" ] ; then
      echo ${server_num}
      break
    fi
    server_num=$((server_num+1))
  done
}

[ -f lib/role_unit_frontend_${ru_frontend} ] && . lib/role_unit_frontend_${ru_frontend} || ru_usage "specified frontend '${ru_frontend}' does not exist"
ru_dir_init
export ru_conf_file ru_id ru_dir ru_inventory ru_playbook ru_roledir
[ ${ru_debug} -eq 1 -a -n "${ru_conf}" ] && . ${ru_conf_file}

### Test interface

if [ -n "${RU_ENV_TYPE}" ] ; then
   ru_warning "[DEPRECATION WARNING] you specified backend using old RU_ENV_TYPE variable."
   ru_warning "RU_ENV_TYPE is to be replaced by RU_BACKEND and will be remove in future versions."
   ru_backend=${ru_env_type}
fi
[ -z "$RU_ENV_IMAGE" ] && ru_info "RU_ENV_IMAGE not specified, running default image '${ru_env_image}'"

### Load virtualization specific library

[ -f lib/role_unit_backend_${ru_backend} ] && . lib/role_unit_backend_${ru_backend} || ru_usage "specified backend '${ru_backend}' does not exist"

# vim: syntax=sh

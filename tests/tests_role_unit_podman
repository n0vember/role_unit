#!/usr/bin/env bash_unit

RU_BACKEND=podman
[ -z "${RU_ENV_IMAGE}" ] && export RU_ENV_IMAGE=debian11
. lib/role_unit

test_i_am_in_a_podman_container() {
  assert_equals "guest" "$(ru_fact ansible_virtualization_role)"
  assert "echo $(ru_fact ansible_virtualization_type) | grep -e '^container' -e '^docker'"
}

test_process_can_be_launched_in_background() {
  ru_run -d sleep 60 > /dev/null
  assert "ru_run pgrep sleep"
  ru_run pkill sleep
}

test_container_has_labels() {
  local container
  container=$(ru_server_name 0)
  assert_equals \
    "true" \
    "$(podman inspect ${container} 2>/dev/null | jq -r '.[].Config.Labels.role_unit')"
  assert_equals \
    "${ru_backend}" \
    "$(podman inspect ${container} 2>/dev/null | jq -r '.[].Config.Labels.ru_backend')"
  assert_equals \
    "${ru_conf_file}" \
    "$(podman inspect ${container} 2>/dev/null | jq -r '.[].Config.Labels.ru_conf_file')"
  assert_equals \
    "0" \
    "$(podman inspect ${container} 2>/dev/null | jq -r '.[].Config.Labels.ru_debug')"
  assert_equals \
    "tests_role_unit_podman" \
    "$(podman inspect ${container} 2>/dev/null | jq -r '.[].Config.Labels.ru_test_file')"
}

setup_suite() {
  ru_init
}

# vim: syntax=sh

#!/usr/bin/env bash_unit

tmp_dir=/tmp/role_init_testing_dir_${RANDOM}
role_init_dir=$(dirname $PWD)

test_role_init_creates_the_role_directory() {
  # create a role
  local tst_role_name=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name})
  # check role has been created
  assert "test -d ${tmp_dir}/${tst_role_name}"
}

test_i_can_actually_launch_the_tests() {
  # create a role
  local tst_role_name=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name})
  # test it
  role_test_by_name ${tst_role_name}
}

test_i_can_create_two_roles_at_once() {
  # create two roles
  local role_prefix=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name}_1 ${tst_role_name}_2)
  # test them
  role_test_by_name ${tst_role_name}_1
  role_test_by_name ${tst_role_name}_2
}

test_invalid_option_is_rejected() {
  local role_init_output=$(cd ${tmp_dir} ; LC_ALL=C ${role_init_dir}/role_init --invalid-option 2>&1 | head -1)
  assert_equals "option parsing: unrecognized option '--invalid-option'" "${role_init_output}"
}

test_verbose_flag_makes_output_verbose() {
  local role_init_output=$(cd ${tmp_dir} ; LC_ALL=C ${role_init_dir}/role_init -v foo 2>&1)
  local expected_output=$(role_foo_verbose_creation)
  assert_equals "${expected_output}" "${role_init_output}"
}

setup() {
  mkdir -p ${tmp_dir}
}

teardown() {
  rm -r ${tmp_dir}
}

role_test_by_name() {
  local role_name=$1
  # launch tests
  export RU_ENV_IMAGE=debian9
  local test_output=$(${tmp_dir}/${role_name}/tests/bash_unit ${tmp_dir}/${role_name}/tests/tests_${role_name} 2>&1 &)
  wait
  local success_result=$(grep 'Running test_that_succeeds... SUCCESS' <(echo -e "${test_output}") | wc -l)
  local failing_result=$(grep 'Running test_that_fails... FAILURE' <(echo -e "${test_output}") | wc -l)
  # check result
  assert_equals "1" "${success_result}"
  assert_equals "1" "${failing_result}"
}

role_foo_verbose_creation() {
  cat <<EOF
mkdir: created directory 'foo'
mkdir: created directory 'foo/tasks'
mkdir: created directory 'foo/meta'
'/home/fruffet/git/role_unit/role_files/tasks' -> 'foo/tasks/main.yml'
'/home/fruffet/git/role_unit/role_files/meta' -> 'foo/meta/main.yml'
mkdir: created directory 'foo/tests'
'/home/fruffet/git/role_unit/tools/bash_unit' -> 'foo/tests/bash_unit'
'/home/fruffet/git/role_unit/lib' -> 'foo/tests/lib'
'/home/fruffet/git/role_unit/lib/role_unit_docker' -> 'foo/tests/lib/role_unit_docker'
'/home/fruffet/git/role_unit/lib/role_unit' -> 'foo/tests/lib/role_unit'
'/home/fruffet/git/role_unit/tools/ansible.cfg' -> 'foo/tests/ansible.cfg'
'/home/fruffet/git/role_unit/tools/tests' -> 'foo/tests/tests_foo'
EOF
}

# vim: syntax=sh

#!/usr/bin/env bash_unit

tmp_dir=/tmp/role_init_testing_dir_${RANDOM}
role_init_dir=$(dirname $PWD)

test_role_init_creates_the_role_directory() {
  # create a role
  local tst_role_name=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name})
  # check role has been created
  assert "test -d ${tmp_dir}/${tst_role_name}"
}

test_role_init_proposes_a_default_gitlab-ci_config() {
  # create a role
  local tst_role_name=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name})
  # check role has been created
  assert "diff expected/test_role_init_gitlab-ci.yml ${tmp_dir}/${tst_role_name}/.gitlab-ci.yml"
}

test_i_can_actually_launch_the_tests() {
  # create a role
  local tst_role_name=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name})
  # test it
  role_test_by_name ${tst_role_name}
}

test_i_can_create_two_roles_at_once() {
  # create two roles
  local role_prefix=ru_tst
  (cd ${tmp_dir} ; ${role_init_dir}/role_init ${tst_role_name}_1 ${tst_role_name}_2)
  # test them
  role_test_by_name ${tst_role_name}_1
  role_test_by_name ${tst_role_name}_2
}

test_invalid_option_is_rejected() {
  assert "cd ${tmp_dir} ; LC_ALL=C ${role_init_dir}/role_init --invalid-option 2>&1 | grep 'option parsing: unrecognized option'"
}

test_verbose_flag_makes_output_verbose() {
  assert "(cd ${tmp_dir} ; LC_ALL=C ${role_init_dir}/role_init -v foo 2>&1) | grep 'created directory:* .foo/.'"
}

setup() {
  mkdir -p ${tmp_dir}
}

teardown() {
  rm -r ${tmp_dir}
}

role_test_by_name() {
  local role_name=$1
  # launch tests
  export RU_ENV_IMAGE=debian11
  local test_output=$(${tmp_dir}/${role_name}/tests/bash_unit ${tmp_dir}/${role_name}/tests/tests_${role_name} 2>&1 &)
  wait
cat <<EOF

DEBUG

${test_output}

END DEBUG

EOF
  local success_result=$(grep 'Running test_that_succeeds... SUCCESS' <(echo -e "${test_output}") | wc -l | tr -d ' ')
  local failing_result=$(grep 'Running test_that_succeeds_in_failure... SUCCESS' <(echo -e "${test_output}") | wc -l | tr -d ' ')
  # check result
  assert_equals "1" "${success_result}"
  assert_equals "1" "${failing_result}"
}

# vim: syntax=sh

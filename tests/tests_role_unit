#!/usr/bin/env bash_unit

[ -z "${RU_ENV_IMAGE}" ] && export RU_ENV_IMAGE=debian11
. lib/role_unit

test_i_have_a_system_to_connect_to() {
  local string="this is a string"
  assert_equals "${string}" "$(ru_run echo ${string} 2>&1)"
}

test_i_can_make_an_ansible_run_over_my_container() {
  ru_run_frontend
}

test_environment_is_docker_container_from_desired_image() {
  local distribution=$(echo $RU_ENV_IMAGE | sed -r 's/^([^0-9]+)(.*)/\1/')
  local version=$(echo $RU_ENV_IMAGE | sed -r 's/^([^0-9]+)(.*)/\2/')
  if [ "${distribution}" == "archlinux" ] ; then version="TEMPLATE_VERSION_ID" ; fi
  if [ "${distribution}" == "ubuntu" ] ; then version="$(echo ${version} | sed -r 's/[0-9]{2}$//')" ; fi
  assert_equals "${distribution}" "$(ru_fact ansible_distribution | tr '[A-Z]' '[a-z]')" "distribution is not expected one"
  assert_equals "${version}" "$(ru_fact ansible_distribution_major_version)" "version is not expected one"
  assert_equals "docker" "$(ru_fact ansible_virtualization_type)"
}

test_group_vars_is_seen() {
  assert "ru_run_frontend_module -m debug -a var=this_is_a_testing_variable | grep '.this_is_a_testing_variable.: .the desired value.'"
  assert "ru_run_frontend_module -m debug -a var=there_is_no_such_thing_as_this_variable | grep '.there_is_no_such_thing_as_this_variable.: .VARIABLE IS NOT DEFINED!.'"
}

test_i_can_access_systemd_if_it_is_my_init_system() {
  init_system=$(ru_fact ansible_service_mgr)
  [ "${init_system}" == "systemd" ] && assert "ru_run systemctl status"
  assert "ru_run echo"
}

test_ru_assert_with_timeout_fails_if_time_exceedeed() {
  local test_file=/tmp/foo/$$
  sleep 2 && ru_run touch ${test_file} &
  assert_fails "ru_run_with_timeout -t 1 test -f ${test_file}"
}

test_ru_assert_with_timeout_succeeds_if_time_is_under_limit() {
  local test_file=/tmp/foo/$$
  sleep 1 && ru_run touch ${test_file} &
  assert "ru_run_with_timeout -t 2 test -f ${test_file}"
  assert "ru_run_with_timeout -t 2 -n 0 test -f ${test_file}"
}

test_i_can_get_server_name_from_num() {
  assert_equals "$(ru_run -n 0 hostname)" "$(ru_server_name 0)"
}

test_i_can_get_server_num_from_name() {
  local server_name=$(ru_run -n 0 hostname)
  assert_equals "0" "$(ru_server_num ${server_name})"
}

setup_suite() {
  ru_init
  ru_run_frontend verbose
}

setup() {
  ru_run mkdir /tmp/foo
}

teardown() {
  ru_run rm -r /tmp/foo
}

# vim: syntax=sh

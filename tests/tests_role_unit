#!/usr/bin/env bash_unit

. lib/role_unit

test_i_have_a_system_to_connect_to() {
  local string="this is a string"
  assert_equals "${string}" "$(ru_run echo ${string} 2>&1)"
}

test_i_can_make_an_ansible_run_over_my_container() {
  ru_run_ansible
}

test_environment_is_docker_container_from_desired_image() {
  local distribution=$(echo $RU_ENV_IMAGE | sed -r 's/^([^0-9]+)(.*)/\1/')
  local version=$(echo $RU_ENV_IMAGE | sed -r 's/^([^0-9]+)(.*)/\2/')
  assert_equals "${distribution}" "$(ru_ansible_fact ansible_distribution | tr '[A-Z]' '[a-z]')"
  assert_equals "${version}" "$(ru_ansible_fact ansible_distribution_major_version)"
  assert_equals "docker" "$(ru_ansible_fact ansible_virtualization_type)"
}

test_group_vars_is_seen() {
  assert "ru_run_ansible_module -m debug -a var=this_is_a_testing_variable | grep '.this_is_a_testing_variable.: .the desired value.'"
  assert "ru_run_ansible_module -m debug -a var=there_is_no_such_thing_as_this_variable | grep '.there_is_no_such_thing_as_this_variable.: .VARIABLE IS NOT DEFINED!.'"
}

test_i_can_access_systemd_if_it_is_my_init_system() {
  init_system=$(ru_ansible_fact ansible_service_mgr)
  [ "${init_system}" == "systemd" ] && assert "ru_run systemctl status"
  assert "ru_run echo"
}

setup_suite() {
  ru_init
  ru_run_ansible verbose
}

# vim: syntax=sh
